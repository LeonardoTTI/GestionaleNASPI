/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestionalenaspi;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author deuco
 */
public class Menu extends JFrame {

    /**
     * Creates new form GUI
     * @throws java.io.IOException
     */
    public Menu() throws IOException {
        //Indovina che fa il costruttorre
        mcr = new MyCellRenderer();
        Files.createDirectories(Path.of("./saves"));
        initComponents();
        curr_sx = "Seleziona un periodo";
        curr_dx = "Seleziona un periodo";
        map_sx = new HashMap<>(1024, 0.5f);
        map_dx = new HashMap<>(1024, 0.5f);
        modelTable = (DefaultTableModel) jTable1.getModel();
        this.setVisible(true);
    }
    
    public static JComboBox<String> getJComboBoxDX(){
        return jComboBoxDX;
    }
    public static JComboBox<String> getJComboBoxSX(){
        return jComboBoxSX;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBoxDX = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxSX = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ConfrontaBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldNonIncrementati = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldNuovi = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldIncrementati = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldTotali = new javax.swing.JTextField();
        jTextFieldAttivi = new javax.swing.JTextField();
        jTextFieldAttiviP = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemAggiungi = new javax.swing.JMenuItem();
        jMenuItemElimina = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Gestione NASPI");
        setMinimumSize(new java.awt.Dimension(600, 600));

        jLabel1.setText("Da:");

        String[] periodiDX = getAggiornamenti();
        String[] comboItem1;
        if(periodiDX != null){
            Arrays.sort(periodiDX);
            comboItem1 = addX(periodiDX, periodiDX.length, "Scegli un periodo");
        } else {
            comboItem1 = new String[]{"Scegli un periodo"};
        }
        jComboBoxDX.setModel(new javax.swing.DefaultComboBoxModel<>(comboItem1));
        jComboBoxDX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDXActionPerformed(evt);
            }
        });

        jLabel2.setText("A:");

        String[] periodiSX = getAggiornamenti();
        String[] comboItem2;
        if(periodiSX != null){
            Arrays.sort(periodiSX);
            comboItem2 = addX(periodiSX, periodiSX.length, "Scegli un periodo");
        } else {
            comboItem2 = new String[]{"Scegli un periodo"};
        }
        jComboBoxSX.setModel(new javax.swing.DefaultComboBoxModel<>(comboItem2));
        jComboBoxSX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSXActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Codice Fiscale", "Cognome", "Nome", "Pratica", "Importo", "Aggiornamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        ConfrontaBtn.setText("Confronta");
        ConfrontaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfrontaBtnActionPerformed(evt);
            }
        });

        jTextFieldNonIncrementati.setEditable(false);
        jTextFieldNonIncrementati.setBackground(new java.awt.Color(255, 103, 87));
        jTextFieldNonIncrementati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNonIncrementatiActionPerformed(evt);
            }
        });

        jLabel4.setText("Non Incrementati");

        jTextFieldNuovi.setEditable(false);
        jTextFieldNuovi.setBackground(new java.awt.Color(255, 245, 150));
        jTextFieldNuovi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNuoviActionPerformed(evt);
            }
        });

        jLabel3.setText("Nuovi");

        jTextFieldIncrementati.setEditable(false);
        jTextFieldIncrementati.setBackground(new java.awt.Color(162, 250, 150));
        jTextFieldIncrementati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIncrementatiActionPerformed(evt);
            }
        });

        jLabel5.setText("Incrementati");

        jLabel6.setText("Totali");

        jLabel7.setText("Attivi %");

        jTextFieldTotali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTotaliActionPerformed(evt);
            }
        });

        jTextFieldAttivi.setBackground(new java.awt.Color(175, 175, 255));
        jTextFieldAttivi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAttiviActionPerformed(evt);
            }
        });

        jTextFieldAttiviP.setBackground(new java.awt.Color(175, 175, 255));
        jTextFieldAttiviP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAttiviPActionPerformed(evt);
            }
        });

        jLabel8.setText("Attivi");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldIncrementati, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(jTextFieldAttivi))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNuovi, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldAttiviP)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldNonIncrementati, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTotali, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jTextFieldIncrementati, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldNuovi, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldNonIncrementati, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldAttivi, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jTextFieldAttiviP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldTotali, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu2.setText("File");

        jMenuItemAggiungi.setEnabled(true);
        jMenuItemAggiungi.setText("Importa Periodo");
        jMenuItemAggiungi.setName(""); // NOI18N
        jMenuItemAggiungi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAggiungiActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemAggiungi);

        jMenuItemElimina.setText("Rimuovi Periodo");
        jMenuItemElimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEliminaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemElimina);

        jMenuItem1.setText("Aggiorna Periodi");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSX, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxDX, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ConfrontaBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxSX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfrontaBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxDXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDXActionPerformed
        //
        //Aggiorna la selezione della comboBox di sinistra
        //
        if("comboBoxChanged".equals(evt.getActionCommand())){
            String tmp = (String) jComboBoxDX.getSelectedItem();
            if(!tmp.equals("Scegli un periodo")){
                curr_dx = tmp.substring(0, tmp.lastIndexOf("."));
                System.out.println(curr_dx); 
            }
        }
    }//GEN-LAST:event_jComboBoxDXActionPerformed

    private void jTextFieldIncrementatiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIncrementatiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIncrementatiActionPerformed

    private void jTextFieldNuoviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNuoviActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNuoviActionPerformed

    private void jTextFieldNonIncrementatiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNonIncrementatiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNonIncrementatiActionPerformed

    private void ConfrontaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfrontaBtnActionPerformed
        if(curr_dx.compareTo(curr_sx)<=0){  
            compare();
        } else if("Seleziona un periodo".equals(curr_sx) || "Seleziona un periodo".equals(curr_dx)){
            JOptionPane.showMessageDialog(null, "Seleziona entrambi i periodi");
        }else {
            JOptionPane.showMessageDialog(null, "Non puoi confrontare un periodo riespetto ad un suo successivo");
        }
    }//GEN-LAST:event_ConfrontaBtnActionPerformed

    private void jMenuItemAggiungiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAggiungiActionPerformed
        //
        //Apre la finestra per importare nuovi aggiornamenti 
        //
        new AddPeriodo().setVisible(true);
    }//GEN-LAST:event_jMenuItemAggiungiActionPerformed

    private void jComboBoxSXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSXActionPerformed
        //
        //Aggiorna la selezione della comboBox di sinistra
        //
        if("comboBoxChanged".equals(evt.getActionCommand())){  
            String tmp = (String) jComboBoxSX.getSelectedItem();
            if(!tmp.equals("Scegli un periodo")){
                curr_sx = tmp.substring(0, tmp.lastIndexOf("."));
                System.out.println(curr_sx); 
            }
        }
    }//GEN-LAST:event_jComboBoxSXActionPerformed

    private void jTextFieldTotaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTotaliActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTotaliActionPerformed

    private void jTextFieldAttiviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAttiviActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAttiviActionPerformed

    private void jTextFieldAttiviPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAttiviPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAttiviPActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = 1+jTable1.rowAtPoint(evt.getPoint());
        int col = 1+jTable1.columnAtPoint(evt.getPoint());
        System.out.println("Premuta colonna: "+col+" e riga: "+row);
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jMenuItemEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEliminaActionPerformed
        new DeletePeriodo().setVisible(true);
    }//GEN-LAST:event_jMenuItemEliminaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Menu.updateAggiornamenti(3);
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Menu().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        
    }
    
    
    public static String[] getAggiornamenti(){
        //
        //ritorna un array di nomi di file .csv trovati nella cartella ./saves da selezionare nel comboBox 
        //
        FilenameFilter filter = (File f, String name1) -> name1.endsWith(".csv");
        String[] output;
        File f = new File("./saves");
        output = f.list(filter);
        return output;
    }
    
    public static String[] addX(String[] old, int len_old, String x){
        //
        //metodo ausiliario, ritorna una stringa con appeso alla fine la stringa X
        //
        String output[] = new String[len_old+1];
        output[0]=x;
        for(int i = 1; i< len_old+1; i++){
            output[i]=old[i-1];
        }
        return output;
    }
    
    public void studyAndColor(HashMap<String,String[]> m_sx, HashMap<String,String[]> m_dx){
        //
        //confronta le due hashmap caricate precedentemente e aggiorna la gui in modo coerente
        //
        String[] value_sx;
        String[] value_dx;
        Integer incrementati = 0, nuovi = 0, persi = 0, attivi = 0, totale = 0;
        Float attiviP;
        for(String key: m_sx.keySet()){
            value_sx = m_sx.get(key);
            if(m_dx.containsKey(key)){
                value_dx = m_dx.get(key);
                if(Float.parseFloat(value_sx[4])==Float.parseFloat(value_dx[4])){
                    modelTable.setValueAt("Non Incrementato", Integer.parseInt(value_sx[0])-1, 6);
                    persi++;
                } else {
                    modelTable.setValueAt("Incrementato", Integer.parseInt(value_sx[0])-1, 6);
                    incrementati++;   
                }  
            } else {
                modelTable.setValueAt("Nuovo", Integer.parseInt(value_sx[0])-1, 6);
                nuovi++;  
            }
            /*
            for(int i = 0; i<=6; i++){
                jTable1.getColumnModel().getColumn(i).setCellRenderer(mcr);
            }
            */
        }
        jTextFieldNonIncrementati.setText(persi.toString());
        jTextFieldIncrementati.setText(incrementati.toString());
        jTextFieldNuovi.setText(nuovi.toString());
        attivi = nuovi + incrementati;
        totale = attivi + persi;
        attiviP = (attivi.floatValue()*100/totale);
        jTextFieldAttivi.setText(attivi.toString());
        int indicePunto = attiviP.toString().indexOf(".");
        jTextFieldAttiviP.setText(attiviP.toString().substring(0, indicePunto+3)+"%");
        jTextFieldTotali.setText(totale.toString());
    }
        
    public static void updateAggiornamenti(int quale){
        String[] periodi = Menu.getAggiornamenti();
        String[] comboItem2;
        if(periodi != null){
            Arrays.sort(periodi);
            comboItem2 = Menu.addX(periodi, periodi.length, "Scegli un periodo");
        } else {
            comboItem2 = new String[]{"Scegli un periodo"};
        }
        switch (quale) {
            case 0://chiamato da AddPeriodo
                Menu.getJComboBoxSX().setModel(new javax.swing.DefaultComboBoxModel<>(comboItem2));
                Menu.getJComboBoxDX().setModel(new javax.swing.DefaultComboBoxModel<>(comboItem2));
                break;
            case 1:
                Menu.getJComboBoxSX().setModel(new javax.swing.DefaultComboBoxModel<>(comboItem2));
                break;
            case 2:
                Menu.getJComboBoxDX().setModel(new javax.swing.DefaultComboBoxModel<>(comboItem2));
                break;
            case 3://chiamato da DeletePeriodo
                Menu.getJComboBoxSX().setModel(new javax.swing.DefaultComboBoxModel<>(comboItem2));
                Menu.getJComboBoxDX().setModel(new javax.swing.DefaultComboBoxModel<>(comboItem2));
                DeletePeriodo.getJComboBoxDel().setModel(new javax.swing.DefaultComboBoxModel<>(comboItem2));
                break;
            default:
                break;
        }
    }
    
    public void compare(){
            if(modelTable.getRowCount()!=0){
                modelTable.setRowCount(0);
                map_sx = new HashMap<>(256, 0.5f );
                map_dx = new HashMap<>(256, 0.5f );
            }
            
            String[] tmp; //i-esimo valore della hashmap
            String prov_key; //i-esima chiave della hashmap
            File file_dx = new File("./saves/"+curr_dx+".csv"); //processiamo prima il file di destra
            //
            //carico la hashmap di destra, questa verra solo usata per il confronto
            //
            if(!curr_sx.equals(curr_dx)){
                try {
                    sc_dx = new Scanner(file_dx);
                    sc_dx.useDelimiter(",");
                    while (sc_dx.hasNextLine()){
                        curr = sc_dx.nextLine();
                        tmp = curr.split(",");
                        prov_key = tmp[1]+tmp[3].split("/")[1];
                        map_dx.put(prov_key, tmp);
                        
                    }
                   
                    sc_dx.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "File di riferimento non trovato");
                    file_dx=null;
                }    
            } 
            File file_sx = new File("./saves/"+curr_sx+".csv");
            //
            //carico la hashmap di sinistra, questa verra usata per il confronto e per popolare la jTable
            //
            try {
                sc_sx = new Scanner(file_sx);
                sc_sx.useDelimiter(",");
                while (sc_sx.hasNextLine()){
                    curr = sc_sx.nextLine();
                    tmp = curr.split(",");
                    prov_key = tmp[1]+tmp[3].split("/")[1];
                    //if(map_sx.containsKey(prov_key)) System.out.println(prov_key[0]+" "+ prov_key[1]+" è stato già inserito");
                    map_sx.put(prov_key, tmp);
                    modelTable.addRow(new Object[]{tmp[0].trim(),tmp[1].trim(),tmp[2].split("/")[0].trim(),tmp[2].split("/")[1].trim(),tmp[3].split("/")[1].trim(),tmp[4].trim(),""});
                }
                sc_sx.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "File di confronto non trovato");
                file_sx=null;
            }            
            if(!curr_sx.equals(curr_dx)){
                studyAndColor(map_sx, map_dx);
            } else {
                Integer i = map_sx.keySet().size();
                jTextFieldIncrementati.setText(i.toString());
                jTextFieldNuovi.setText("0");
                jTextFieldNonIncrementati.setText("0");
                jTextFieldTotali.setText("0");
                jTextFieldAttivi.setText("0");
                jTextFieldAttiviP.setText("0");
            }        
    }
    
    private HashMap<String, String[]> map_sx;
    private HashMap<String, String[]> map_dx;
    private transient String curr;
    private Scanner sc_sx;
    private Scanner sc_dx;
    private DefaultTableModel modelTable;
    private String curr_sx = "Seleziona un periodo";
    private String curr_dx = "Seleziona un periodo";
    private MyCellRenderer mcr;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConfrontaBtn;
    private static javax.swing.JComboBox<String> jComboBoxDX;
    private static javax.swing.JComboBox<String> jComboBoxSX;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemAggiungi;
    private javax.swing.JMenuItem jMenuItemElimina;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldAttivi;
    private javax.swing.JTextField jTextFieldAttiviP;
    private javax.swing.JTextField jTextFieldIncrementati;
    private javax.swing.JTextField jTextFieldNonIncrementati;
    private javax.swing.JTextField jTextFieldNuovi;
    private javax.swing.JTextField jTextFieldTotali;
    // End of variables declaration//GEN-END:variables
}
